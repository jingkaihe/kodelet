[tools]
# Core language and runtime tools
go = "1.25.1"
node = "22.17.0"
npm = "11.6.2"


# Development and build tools
golangci-lint = "latest"
air = "latest"
gh = "latest"                                           # GitHub CLI for releases
"go:github.com/isaacphi/mcp-language-server" = "latest"
"go:golang.org/x/tools/gopls" = "latest"
"go:honnef.co/go/tools/cmd/staticcheck" = "latest"
"go:mvdan.cc/gofumpt" = "latest"                        # Stricter Go formatter

[settings]
experimental = true

[env]
# Version-related environment variables
VERSION = "{{exec(command='cat VERSION.txt')}}"
GIT_COMMIT = "{{exec(command='git rev-parse --short HEAD 2>/dev/null || echo unknown')}}"
BUILD_TIME = "{{exec(command='date -u \"+%a %b %d %I:%M:%S %p UTC %Y\"')}}"

# Version package path for ldflags
VERSION_PKG = "github.com/jingkaihe/kodelet/pkg/version"

# Node.js versions for Docker builds
NODE_VERSION = "22.17.0"
NPM_VERSION = "11.6.2"

[tasks.build]
description = "Build the application with embedded web UI"
depends = ["code-generation"]
run = [
  "mkdir -p bin",
  "echo 'Building kodelet binary...'",
  "CGO_ENABLED=0 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet ./cmd/kodelet/",
]

[tasks.build-dev]
description = "Build the application without web UI (faster for development)"
run = [
  "mkdir -p bin",
  "echo 'Building kodelet binary (without frontend)...'",
  "CGO_ENABLED=0 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet ./cmd/kodelet/",
]

[tasks.code-generation]
description = "Generate frontend assets"
run = ["go generate ./pkg/webui"]

[tasks.chat]
description = "Build and run in interactive chat mode"
depends = ["build"]
run = ["./bin/kodelet chat"]

[tasks.dev-server]
description = "Run development server with auto-reload"
run = ["echo 'Starting development server with auto-reload...'", "air"]

[tasks.test]
description = "Run Go tests"
run = ["go test ./pkg/... ./cmd/..."]

[tasks.format]
description = "Format Go code with gofumpt"
run = ["gofumpt -w ."]

[tasks.lint]
description = "Run all linters (go vet, golangci-lint, staticcheck)"
run = ["go vet ./...", "echo 'Running golangci-lint...'", "golangci-lint run", "echo 'Running staticcheck...'", "staticcheck -checks=all ./..."]

[tasks.install-npm]
description = "Install npm dependencies for frontend"
run = [
  "echo 'Installing npm dependencies for frontend...'",
  "cd pkg/webui/frontend && npm install",
]

[tasks.eslint]
description = "Run eslint on frontend code"
run = [
  "echo 'Running eslint on frontend code...'",
  "cd pkg/webui/frontend && npm run lint",
]

[tasks.eslint-fix]
description = "Run eslint with auto-fix on frontend code"
run = [
  "echo 'Running eslint with auto-fix on frontend code...'",
  "cd pkg/webui/frontend && npm run lint:fix",
]

[tasks.frontend-test]
description = "Run frontend tests"
run = [
  "echo 'Running frontend tests...'",
  "cd pkg/webui/frontend && npm run test:run",
]

[tasks.frontend-test-watch]
description = "Run frontend tests in watch mode"
run = [
  "echo 'Running frontend tests in watch mode...'",
  "cd pkg/webui/frontend && npm run test:watch",
]

[tasks.frontend-test-ui]
description = "Run frontend tests with UI"
run = [
  "echo 'Running frontend tests with UI...'",
  "cd pkg/webui/frontend && npm run test:ui",
]

[tasks.frontend-test-coverage]
description = "Run frontend tests with coverage"
run = [
  "echo 'Running frontend tests with coverage...'",
  "cd pkg/webui/frontend && npm run test:coverage",
]

[tasks.cross-build]
description = "Cross-compile for multiple platforms"
depends = ["code-generation"]
run = [
  "mkdir -p bin",
  "echo 'Cross-compiling for multiple platforms...'",
  "CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet-linux-amd64 ./cmd/kodelet/",
  "CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet-linux-arm64 ./cmd/kodelet/",
  "CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet-darwin-amd64 ./cmd/kodelet/",
  "CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet-darwin-arm64 ./cmd/kodelet/",
  "CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags=\"-X '$VERSION_PKG.Version=$VERSION' -X '$VERSION_PKG.GitCommit=$GIT_COMMIT' -X '$VERSION_PKG.BuildTime=$BUILD_TIME'\" -o ./bin/kodelet-windows-amd64.exe ./cmd/kodelet/",
]

[tasks.cross-build-docker]
description = "Cross-compile for multiple platforms using Docker"
run = [
  "mkdir -p bin",
  "echo 'Cross-compiling for multiple platforms using Docker...'",
  "docker build --build-arg VERSION=\"$VERSION\" --build-arg GIT_COMMIT=\"$GIT_COMMIT\" --build-arg BUILD_TIME=\"$BUILD_TIME\" --build-arg NODE_VERSION=\"$NODE_VERSION\" --build-arg NPM_VERSION=\"$NPM_VERSION\" -f Dockerfile.cross-build -t kodelet-cross-build .",
  "echo 'Extracting binaries from Docker container...'",
  "docker run --rm -v $(pwd)/bin:/output kodelet-cross-build cp /bin/kodelet-linux-amd64 /bin/kodelet-linux-arm64 /bin/kodelet-darwin-amd64 /bin/kodelet-darwin-arm64 /bin/kodelet-windows-amd64.exe /output/",
  "echo 'Cross-build complete. Binaries available in ./bin/'",
  "ls -la ./bin/kodelet-*",
]

[tasks.docker-build]
description = "Build Docker image"
run = [
  "docker build --build-arg VERSION=\"$VERSION\" --build-arg GIT_COMMIT=\"$GIT_COMMIT\" --build-arg BUILD_TIME=\"$BUILD_TIME\" --build-arg NODE_VERSION=\"$NODE_VERSION\" --build-arg NPM_VERSION=\"$NPM_VERSION\" -t kodelet .",
]

[tasks.docker-run]
description = "Run with Docker"
run = [
  "docker run -e ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY} kodelet \"${query:-}\"",
]

[tasks.e2e-test-docker]
description = "Run end-to-end tests in Docker"
run = [
  "docker build -f tests/acceptance/Dockerfile.e2e -t kodelet-e2e-tests .",
  "docker run --rm -e ANTHROPIC_API_KEY -e OPENAI_API_KEY kodelet-e2e-tests",
]

[tasks.release-note]
description = "Generate release notes"
depends = ["build"]
run = ["./bin/kodelet run -r release-note"]

[tasks.release]
description = "Create GitHub release with cross-compiled binaries"
depends = ["cross-build"]
run = [
  "gh release create v$VERSION",
  "gh release upload v$VERSION ./bin/kodelet-linux-amd64",
  "gh release upload v$VERSION ./bin/kodelet-linux-arm64",
  "gh release upload v$VERSION ./bin/kodelet-darwin-amd64",
  "gh release upload v$VERSION ./bin/kodelet-darwin-arm64",
  "gh release upload v$VERSION ./bin/kodelet-windows-amd64.exe",
]

[tasks.github-release]
description = "Create GitHub release with release notes from RELEASE.md"
depends = ["cross-build-docker"]
run = [
  "echo 'Creating GitHub release v$VERSION...'",
  "./scripts/extract-release-notes.sh > /tmp/release-notes.md",
  "gh release create v$VERSION --title \"v$VERSION\" --notes-file /tmp/release-notes.md ./bin/kodelet-linux-amd64 ./bin/kodelet-linux-arm64 ./bin/kodelet-darwin-amd64 ./bin/kodelet-darwin-arm64 ./bin/kodelet-windows-amd64.exe",
  "rm -f /tmp/release-notes.md",
  "echo 'GitHub release v$VERSION created successfully!'",
]

[tasks.push-tag]
description = "Push version tag to trigger automated GitHub Actions release"
run = [
  "echo 'Creating and pushing tag v$VERSION...'",
  "if git rev-parse \"v$VERSION\" >/dev/null 2>&1; then echo 'Tag v$VERSION already exists locally. Pushing to origin...'; else echo 'Creating new tag v$VERSION...'; git tag v$VERSION; fi",
  "git push origin v$VERSION",
  "echo 'Tag v$VERSION pushed successfully!'",
  "echo 'GitHub Actions will automatically create a release with binaries and release notes.'",
]

# Convenience aliases for common tasks
[tasks.run]
description = "Build and run in one-shot mode"
depends = ["build"]
run = ["./bin/kodelet run \"${query:-}\""]

[tasks.serve]
description = "Start the web UI server"
depends = ["build"]
run = ["./bin/kodelet serve"]

[tasks.install]
description = "Install all dependencies (Go modules and npm packages)"
run = [
  "echo 'Installing Go modules...'",
  "go mod download",
  "echo 'Installing npm dependencies...'",
  "cd pkg/webui/frontend && npm install",
  "echo 'All dependencies installed successfully!'",
]

