name: Background Kodelet

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  issues: write          # Comment on issues
  pull-requests: write   # Create PRs
  contents: write        # Push commits
env:
  TIMEOUT_MINUTES: "300"

jobs:
  kodelet-work:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours
    # Complete validation in single if: condition - only run if commentor is maintainer
    if: |
      (
        (github.event_name == 'issue_comment' && github.event.issue.pull_request == null && contains(github.event.comment.body, '@kodelet')) ||
        (github.event_name == 'issue_comment' && github.event.issue.pull_request != null && contains(github.event.comment.body, '@kodelet')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@kodelet')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@kodelet'))
      ) &&
      (
        (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR') ||
        (github.event.review.author_association == 'OWNER' || github.event.review.author_association == 'MEMBER' || github.event.review.author_association == 'COLLABORATOR')
      )

    steps:
      - name: Post status comment
        uses: actions/github-script@v7
        with:
          script: |
            // Determine the correct issue/PR number based on event type
            let issueNumber;
            let isPR = false;

            if (context.eventName === 'pull_request_review_comment' || context.eventName === 'pull_request_review') {
              issueNumber = context.payload.pull_request.number;
              isPR = true;
            } else if (context.payload.issue?.pull_request != null) {
              // issue_comment on a PR
              issueNumber = context.issue.number;
              isPR = true;
            } else {
              // Regular issue comment
              issueNumber = context.issue.number;
              isPR = false;
            }

            const workType = isPR ? 'PR comment' : 'issue';

            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ü§ñ Kodelet is starting to work on this ${workType}...`
            });
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone for proper git operations
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Kodelet
        run: |
          # Install from the installation script
          curl -sSL https://raw.githubusercontent.com/jingkaihe/kodelet/main/install.sh | bash
      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENTER: ${{ github.event.comment.user.login || github.event.review.user.login }}
        run: |
          # Try to get the user's public email first
          USER_DATA=$(gh api users/$COMMENTER 2>/dev/null || echo "{}")
          EMAIL=$(echo "$USER_DATA" | jq -r '.email // empty')
          USER_ID=$(echo "$USER_DATA" | jq -r '.id // empty')

          if [ -z "$EMAIL" ] || [ "$EMAIL" = "null" ]; then
            # Use GitHub's private noreply format with user ID
            if [ -n "$USER_ID" ] && [ "$USER_ID" != "null" ]; then
              EMAIL="${USER_ID}+${COMMENTER}@users.noreply.github.com"
            else
              EMAIL="${COMMENTER}@users.noreply.github.com"
            fi
          fi

          git config --global user.name "$COMMENTER"
          git config --global user.email "$EMAIL"
      - name: Set up Go # as the dev env
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Run Kodelet
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KODELET_LOG_LEVEL: "info"
        run: |
          # Determine if this is a PR comment or issue comment
          if [ "${{ github.event_name }}" = "pull_request_review_comment" ] || [ "${{ github.event_name }}" = "pull_request_review" ]; then
            # Handle PR review comments
            PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
            if [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
              COMMENT_ID="${{ github.event.comment.id }}"
              kodelet pr-respond --pr-url "$PR_URL" --comment-id "$COMMENT_ID"
            else
              # PR review without specific comment ID - use latest @kodelet mention
              kodelet pr-respond --pr-url "$PR_URL"
            fi
          elif [ "${{ github.event.issue.pull_request }}" != "" ] && [ "${{ github.event.issue.pull_request }}" != "null" ]; then
            # Handle PR comments (issue_comment on PR)
            PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.issue.number }}"
            COMMENT_ID="${{ github.event.comment.id }}"
            kodelet pr-respond --pr-url "$PR_URL" --comment-id "$COMMENT_ID"
          else
            # Handle regular issue comments
            ISSUE_URL="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}"
            kodelet resolve --issue-url "$ISSUE_URL"
          fi
      - name: Handle errors
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            // Determine the correct issue/PR number based on event type
            let issueNumber;
            let isPR = false;

            if (context.eventName === 'pull_request_review_comment' || context.eventName === 'pull_request_review') {
              issueNumber = context.payload.pull_request.number;
              isPR = true;
            } else if (context.payload.issue?.pull_request != null) {
              // issue_comment on a PR
              issueNumber = context.issue.number;
              isPR = true;
            } else {
              // Regular issue comment
              issueNumber = context.issue.number;
              isPR = false;
            }

            const workType = isPR ? 'PR comment' : 'issue';

            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Kodelet encountered an error while working on this ${workType}**

              The automated workflow failed during execution. This could be due to:
              - Complex requirements that need human intervention
              - Environmental or dependency issues
              - API rate limits or service unavailability

              Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.

              You may want to try again later or handle this manually.`
            });
